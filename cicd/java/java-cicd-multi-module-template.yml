variables:
  DEPLOY_VOLUME_COMMAND: ""
  BRANCH_NAME: ${CI_COMMIT_BRANCH}-
  TAG_COMMIT_VESRION: ${BRANCH_NAME}${CI_COMMIT_SHORT_SHA}
  DESTINATION_REPOSITORY: $NEXUS_URL/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DEPLOY: "false"
  GIT_STRATEGY: clone
  PROFILE: "prod"

  port_module1: 8082
  port_module2: 8083

.login_into_nexus: &login_into_nexus
  - echo "Login Into Nexus...."
  - docker login $NEXUS_URL -u $NEXUS_USER -p $NEXUS_PASS

.find-container-name: &find-container-name
  - export DOCKER_CONTAINER_NAME=$(docker ps -a --format '{{.Names}}\t{{.Image}}' | grep -e "^${BRANCH_NAME}.*-${project_name}$" | grep -e ${DESTINATION_REPOSITORY} | awk -F'\t' '{print $1}' || true)
  - echo "i found this container ${DOCKER_CONTAINER_NAME}"

.find-image-id: &find-image-id
  - export DOCKER_IMAGE_ID_FOR_CONTAINER=$(docker images | grep -e "${BRANCH_NAME}[^[:space:]]*-${project_name}" | tr -s ' ' | cut -d ' ' -f 3 || true)
  - echo "i found this image id ${DOCKER_IMAGE_ID_FOR_CONTAINER}"

.remove-container: &remove-container
  - if [ -n "$DOCKER_CONTAINER_NAME" ]; then echo "$DOCKER_CONTAINER_NAME" | xargs -I {} docker rm -f {}; fi

.remove-image: &remove-image
  - if [ -n "$DOCKER_IMAGE_ID_FOR_CONTAINER" ]; then echo "$DOCKER_IMAGE_ID_FOR_CONTAINER" | xargs -I {} docker rmi -f {}; fi

.stop-running-container: &stop-running-container

  - CONTAINER_ID=$(docker ps -qf "publish=${RANDOM_PORT}")

  - |
    if [ -z "$CONTAINER_ID" ]; then 
      echo "no running container exposing port ${RANDOM_PORT}";
    else
      docker stop "${CONTAINER_ID}";
      echo "container is exposing port ${RANDOM_PORT}  and ID=${CONTAINER_ID} stopped successfully ";
    fi  

.deploy-rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: on_success
    - if: '$CI_COMMIT_MESSAGE =~ /action: deploy/'
      when: always
    - if: '$CI_PIPELINE_SOURCE != "push" && $CI_PIPELINE_SOURCE != "merge_request_event"' # manual pipeline on main using Run Pipeline button
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"' # manual pipeline on main using Run Pipeline
      when: always

.test-rules: &test-rules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "develop"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME != "main" && $CI_COMMIT_REF_NAME != "develop"'

image: codestrongbiz/jdk16-maven-docker

services:
  - docker:dind

stages:
  - path-finder
  - test
  - build
  - docker-image
  - deploy-stage

path-finder:
  stage: path-finder
  script:
    - echo "you committed [$CI_COMMIT_MESSAGE]"
    - PROJECT_NAME=$(echo $CI_COMMIT_MESSAGE | awk -F'project-name:' '{print $2}' | tr -d '[:space:]');
    - |
      if [[ -z "$PROJECT_NAME" ]]; then
        echo "please insert project-name";
        exit 1;
      else
        echo $PROJECT_NAME;
        echo $PROJECT_NAME > project_name.txt;
        echo "lets build $(cat project_name.txt) project ...";
      fi 

  artifacts:
    paths:
      - project_name.txt

unit-test:
  stage: test
  script:
    - export project_name=$(cat project_name.txt)
    - cd ./$project_name
    - echo $project_name
    - ls
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS test -Dmaven.repo.remote=$MAVEN_USER_HOME
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml
  allow_failure: true
  <<: *test-rules


build:
  stage: build
  script:
    - echo $MAVEN_USER_HOME
    - export project_name=$(cat project_name.txt)
    - echo $MAVEN_USER_HOME
    - cd ./common
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS  deploy -Dnexus.username=$NEXUS_USER -Dnexus.password=$NEXUS_PASS -Dmaven.test.skip=true -Dmaven.repo.remote=$MAVEN_USER_HOME
    - cd ../
    - cd ./$project_name
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean install -Dnexus.username=$NEXUS_USER -Dnexus.password=$NEXUS_PASS -Dmaven.test.skip=true -Dmaven.repo.remote=$MAVEN_USER_HOME

  artifacts:
    paths:
      - target/app.jar
      - target/Dockerfile
      - src/main/docker
    expire_in: 1 hour

docker-image:
  stage: docker-image

  before_script:
    - *login_into_nexus
  script:
    - export project_name=$(cat project_name.txt)
    - cd ./$project_name
    - echo "building docker image ......"
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS  compile jib:build -Dnexus.username=$NEXUS_USER -Dnexus.password=$NEXUS_PASS -DsendCredentialsOverHttp=true -Dmaven.test.skip=true -Dmaven.repo.remote=$MAVEN_USER_HOME -Dmaven.wagon.http.ssl.insecure=true  -Djib.to.image=${DESTINATION_REPOSITORY}:${TAG_COMMIT_VESRION}-${project_name} -Djib.to.auth.username=$NEXUS_USER -Djib.to.auth.password=$NEXUS_PASS
  rules:
    - !reference [ .deploy-rules, rules ]

cleanup:
  stage: deploy-stage
  resource_group: deploy_stage
  before_script:
    - export project_name=$(cat project_name.txt)
    - *find-container-name
    - *find-image-id
  script:
    - *remove-container
    - *remove-image
    - echo "Cleanup completed"
  tags:
    - stage-201.31
  rules:
    - !reference [ .deploy-rules, rules ]

deploy-stage:
  stage: deploy-stage
  resource_group: deploy_stage
  when: on_success
  before_script:
    - *login_into_nexus
  script:
    - export project_name=$(cat project_name.txt)
    - docker pull ${DESTINATION_REPOSITORY}:${TAG_COMMIT_VESRION}-${project_name}

    # --------------- dynamically add port to find back port

    - CONTAINER_PORT_VAR="port_${project_name}"
    - CONTAINER_PORT=${!CONTAINER_PORT_VAR}
    - export CONTAINER_PORT

    # --------------- dynamically add port to find front port

    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
      export RANDOM_PORT=$(($CONTAINER_PORT - 1000)); 
      
      elif [ "$CI_COMMIT_REF_NAME" = "develop" ]; then
      export RANDOM_PORT=$CONTAINER_PORT;
      else
      export RANDOM_PORT=$(shuf -i 9001-9999 -n 1);
      fi
    - echo $RANDOM_PORT
    - echo "profile is ---> " $PROFILE

    # --------------- find running container that is running on specified port and then stop it

    - *stop-running-container
    - docker run -u 1008:998 -d --restart unless-stopped --name ${TAG_COMMIT_VESRION}-${project_name} -e SPRING_PROFILES_ACTIVE=$PROFILE -p $RANDOM_PORT:$CONTAINER_PORT ${DESTINATION_REPOSITORY}:${TAG_COMMIT_VESRION}-${project_name}
    - echo $RANDOM_PORT
    - echo "RANDOM_PORT=$RANDOM_PORT" >> deploy.env

  artifacts:
    reports:
      dotenv: deploy.env
  environment:
    name: $CI_COMMIT_REF_NAME
    url: http://{ip-of-your-stage-srver}:$RANDOM_PORT
    on_stop: stop-stage
  tags:
    - stage-201.31
  rules:
    - !reference [ .deploy-rules, rules ]

stop-stage:
  stage: deploy-stage
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  script:
    - *find-container-name
    - *remove-container
  tags:
    - stage-201.31
  when: manual

